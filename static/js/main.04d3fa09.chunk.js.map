{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","map","user","index","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","marginTop","border","height","children","App","onSearchRobotChange","event","setState","target","value","state","console","log","fetch","then","response","json","users","filteredRobots","this","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iNAceA,EAZF,SAACC,GAAW,IAEbC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,MAAOC,EAAOH,EAAPG,GACrB,OAAQ,yBAAKC,UAAU,uDAAsD,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAA1B,cAC7F,6BACI,4BAAKF,GACL,2BAAIC,MCkBDK,EAtBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEhB,OAEI,6BACIA,EAAOC,KAAI,SAACC,EAAMC,GAGd,OAAQ,kBAAC,EAAD,CACJC,IAAKD,EACLR,GAAIK,EAAOG,GAAOR,GAClBF,KAAMO,EAAOG,GAAOV,KACpBC,MAAOM,EAAOG,GAAOT,cCE1BW,EAfG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC9B,OACI,yBAAKX,UAAU,OACX,2BACIA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCMXI,G,MAbT,SAACnB,GAKC,OAEI,yBAAKoB,MAAO,CAAEC,UAAW,SAAUC,UAAW,KAAMC,OAAQ,mBAAoBC,OAAQ,SACnFxB,EAAMyB,YCkFRC,G,kBA5Eb,aAAe,IAAD,8BACZ,+CAgCFC,oBAAsB,SAACC,GAErB,EAAKC,SAAS,CAAEf,YAAac,EAAME,OAAOC,SAjC1C,EAAKC,MAAQ,CACXxB,OAAQ,GAIRM,YAAa,IAEfmB,QAAQC,IAAI,eATA,E,iFAeO,IAAD,OAElBC,MAAM,8CAQHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAAErB,OAAQ+B,OAEzCN,QAAQC,IAAI,uB,+BAUJ,IAAD,OAEDM,EAAiBC,KAAKT,MAAMxB,OAAOkC,QAAO,SAAAC,GAC9C,OAAOA,EAAM1C,KAAK2C,cAAcC,SAAS,EAAKb,MAAMlB,YAAY8B,kBAKlE,OAHAX,QAAQC,IAAIM,GACZP,QAAQC,IAAI,UAEqB,IAA7BO,KAAKT,MAAMxB,OAAOsC,OACb,uCAIL,yBAAK1C,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAc0B,KAAKd,sBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUnB,OAAQgC,U,GAzDZO,cCHEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCYNC,IAASC,OACL,6BACI,kBAAC,EAAD,OAGFC,SAASC,eAAe,SDgGxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,iB","file":"static/js/main.04d3fa09.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n\r\n    const { name, email, id } = props;//destructuring her seferinde props.name yazmamak için\r\n    return (<div className=\"tc bg-light-green dib br2 pa3 ma2 grow bw2 shadow-5\"><img alt='robot' src={`https://robohash.org/${id}?200x200`}></img>\r\n        <div>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n        </div>\r\n    </div>);\r\n}\r\n\r\n//props.name js expression olduğu için { } içine yazdık , that way works in jsx\r\nexport default Card;\r\n\r\n//paranmetre kısmında da direkt destructuringi halledebilirilm { name, email, id } bunu ( ) bunun içine yazarak","import React from 'react';\r\nimport Card from '../components/Card';\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n    return (//jsx için {cardComponnet yazdık}\r\n\r\n        <div>{\r\n            robots.map((user, index) => {\r\n                //we want to return a card component\r\n                //key props should normally sth unique like id, to make it easier to remove in deletions of cards\r\n                return (<Card\r\n                    key={index}\r\n                    id={robots[index].id}\r\n                    name={robots[index].name}\r\n                    email={robots[index].email} />\r\n                );\r\n            })}\r\n        </div>\r\n\r\n    );\r\n}\r\n//CardList is a pure, deterministic function\r\n//if robots(prop) is same it will always render(return) the same things\r\n//so CardList is a PURE COMPONENT\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input\r\n                className=\"pa3 ba b--green bg-lightest-blue\"\r\n                type=\"search\"\r\n                placeholder=\"search robots\"\r\n                onChange={searchChange}></input>\r\n        </div>\r\n    );\r\n\r\n}\r\n//every time searcbox is changed we will call the searchChange function in App.js\r\n//communicates with  App (parent)\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll\r\n    = (props) => {\r\n        //return props.children;//if we run this nothing changes\r\n        //props have children->we can create components that wrap other component like Scroll\r\n\r\n        //css style yazmanın jsx syntaxi bu, görmek için border ı 5px yap\r\n        return (\r\n\r\n            <div style={{ overflowY: 'scroll', marginTop: \"3%\", border: '5px solid silver', height: '70vh' }}>\r\n                {props.children}\r\n            </div>\r\n        );\r\n    };\r\n\r\nexport default Scroll;","import React, { Component } from 'react';//destructuring\nimport CardList from '../components/CardList';\n//import { robots } from './robots';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from '../components/Scroll';\n\n\n\nimport { render } from '@testing-library/react';\n\n\n//App.js te SearchBox , CardList falan var bunlar pure component\n//App.js stateleri barındırdığı için SMART COMPONENT ve class App syntaxini kullanılıyolar \n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {//our App component has 2 states, state is what changes in an app, what describes the app\n      robots: [],//our state robots is passed down as probs to aşağıda CardList e\n      //even though CardList accepts robots as probs\n      //App has it as state so now it can change it \n      //real life scenarioda(ilk halinde robots:robots,tu) robots:[] olur ve site load olunca array internetten bir serverdan verilerle doldulur\n      searchfield: ''//onSearchRobotChange burayı değiştiriyor\n    }//react uses the states to render and pass them as props to the components(SearchBox,CardList vb)->aşağıda olan\n    console.log('constructor');\n\n  }\n\n\n\n  componentDidMount() {//runs automatically with mounting\n    //this.setState({ robots: robots });//we update state \n    fetch('https://jsonplaceholder.typicode.com/users')//updating state after we fetch, we get a response\n      //aynı şey daha uzun yazımlısı\n      // .then(response => {\n      //   return response.json();//convert the response \n      // })\n      // .then(users => {\n      //   this.setState({ robots: users })\n      // })\n      .then(response => response.json())//convert the response  \n      .then(users => this.setState({ robots: users }))//and we are updating state\n    // .then(users => {}) -> böyle olunca LOADING yazıyor\n    console.log('componentDidMount');\n\n  }\n  //use arrow functions when implementing your own methods, öbür türlü\n  //this.state.robots un this ini App değil de event <input içinde olduğu için input sanıyo\n  onSearchRobotChange = (event) => {\n    //console.log(event.target.value);//returns input value when a key is entered \n    this.setState({ searchfield: event.target.value })\n\n  }\n  render() {\n    //const {robots,searchfield}=this.state; destrucrtuing yaparak this.state.robots yerine robots yazabilirim\n    const filteredRobots = this.state.robots.filter(robot => {\n      return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n    })\n    console.log(filteredRobots);\n    console.log('render');\n\n    if (this.state.robots.length === 0) {\n      return <h1>Loading</h1>\n    }\n    else {\n      return (\n        <div className=\"tc\">\n          <h1 className=\"f2\">RoboFriends</h1>\n          <SearchBox searchChange={this.onSearchRobotChange} />\n          <Scroll>\n            <CardList robots={filteredRobots}></CardList>\n          </Scroll>\n        </div>\n      );\n    }\n\n\n  }\n  //Scroll bir component ı wrapleyen bir componenet\n\n}\n//<SearchBox searchChange={this.onSearchRobotChange}/> -> searchChange(function) prop olarak alınacak, SearchBoxta\n//this means the App here \n//searchbox has to communicate with cardlist\n//same as:\n//<CardList robots={robots}></CardList>\n\n//<SearchBox searchChange={this.onSearchRobotChange} /> :\n//whenever there is an onChange on the input it lets the App know,runs onSearchRobotChange\n//runs the function with the event, updates the searchfield  to whatever user types\n\nexport default App;\n\n//constructor runs first\n//we run render, componentDidMount dokümandaki sıradaki gibi\n//ama sonra tekrar render runlıyo\n//state değişikliği olduğunda(array boş yaratılmıştı, orda robots:robots; yapılıyo) Updating kısmına gidiyor\n//ve ordaki methodları tek tek runlıyor\n//o  methodlardan biri de render, bu yüzden render tekrar runlanmış oluyo","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';//. means same directory, check src folder\nimport App from './containers/App';//means App.js , extension koymazsan js olduğunu assume ediyor, src de App.js var o yani bu\n//import Hello from './Hello';\nimport * as serviceWorker from './serviceWorker';\n//import Card from './Card';\n//import CardList from './CardList';\nimport 'tachyons';//command de: npm install tachyons yaparak   bu yeni paketi ekledik,package.jsonda görebiliriz\n//bu css i kolaylaştıran bişi\nimport { robots } from './robots';//export default olmadığı için destructuring yapmalıyız\n\n\n// public dosyasındaki indexedDB.html de: body de sadece bir div var (id=\"root\") \n// o divin de içi boş görünüyor, ama browserda çalışırken boş değil\n\n//we are grabbing the element with id=root\n//and we want to \"render\" this \"App\" COMPONENT\n//ReactDOM.render(<App />, document.getElementById('root'));//sample app çalışıyo normalde\n\n//bununla değiştirip kaydedince browserı refreshlemeden değişiyor\n//ve command propmta \"App is imported but never used gibi uyarılar veriyor\" bu yüzden import App i commente alıyoruz\n//warning vermeyi bırakıyor\n//ReactDOM.render(<h1>Hello</h1>, document.getElementById('root'));\n\n//creating our own component Hello\n//ReactDOM.render(<Hello greeting={\"Hi Tamara\"} />, document.getElementById('root'));\n//now we have added a greeting props, Hello.js de buna erişimim var\n\n//creating a card component\nReactDOM.render(\n    <div>\n        <App />\n\n    </div>\n    , document.getElementById('root'));//sample app çalışıyo normalde\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}